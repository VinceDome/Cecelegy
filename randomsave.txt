@client.command(case_insensitive=True, aliases=["reminder"])
async def remind(ctx, person, wait_time, *, reminder_message):
    
    wait_timeLIST = wait_time.split("-")
    final_list = []
    final_time = 0
    for i in wait_timeLIST:
        time_added = ""
        print(i)
        for a in i:
            if a != i[len(i)-1]:
                time_added = str(time_added) + str(a)
                print(time_added)
        time_added = int(time_added)
        print(time_added)
        if i[len(i)-1] == "d":
            time_added *= 24 * 60 * 60
        elif i[len(i)-1] == "h":
            time_added *= 60 * 60
        elif i[len(i)-1] == "m":
            time_added *= 60


        final_list.append(time_added)
        print(final_list)


    for i in final_list:
        final_time += i


    if f"<@!{ctx.author.id}>" == person:
        await ctx.send(f"<@!{ctx.author.id}>, I will remind you in {final_time} seconds: {reminder_message}")
    else:
        await ctx.send(f"<@!{ctx.author.id}>, I will remind {person} in {final_time} seconds: {reminder_message}")

    



    if final_time < 60 or  final_time >= 60:
        await asyncio.sleep(final_time)
    



    if f"<@!{ctx.author.id}>" == person:
        await ctx.send(f"""{person}, here's a reminder for you: "{reminder_message}" """)
    else:
        await ctx.send(f"""{person}, here's a reminder for you: "{reminder_message}" (set up by <@!{ctx.author.id}>)""")